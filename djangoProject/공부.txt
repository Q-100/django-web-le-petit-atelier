1. setting 파일에서 언어랑 시간 바꾸기
2. django-admin startapp 이름
    - 앱 시작하기(__init__, admin, apps 등)
3. 메인의 urls에서 urlpattern 추가하기(URL 매핑추가)
    - path('le_petit_atelier/', include('le_petit_atelier.urls')) 추가하기
    - include는 le_petit_atelier/로 시작되는 페이지 요청은 모두 le_petit_atelier.urls에서 처리하라고 알림

    # 여기서 path가 ''인 이유는 메인의 urls에서 이미
    # path('le_petit_atelier/', include('le_petit_atelier.urls')),로 처리했기때문에
    # 여기의 urls에 path('le_petit_atelier/'로하면 결국
    # le_petit_atelier/le_petit_atelier/ 가 되기 때문에 앞에서 처리한걸 뒤에서 또할필요없음


4. 앱의 views.py에 index 함수 추가하기
    - index 함수의 매개변수인 request는 장고에 의해 자동으로 전달되는 HTTP 요청 객체
    - request는 사용자가 전달한 데이터를 확인 할 때 사용

5. Url 분리하기
    - 앱의 urls.py에 매핑하기 위해서는 앱폴더에 urls.py 생성 후 위의 3번 참고하기기
    - urlpatterns = [
    path('', views.index),
    ]

6. 모델(데이터 관리)
    - 장고는 모델로 데이터를 관리함
    - 데이터베이스를 여러개 사용 할 때 setting.py의 데이터베이스에서 default에 지정한 데이터 베이스 외에 추가로 등록 가능
    - python manage.py migrate로 앱들이 필요로 하는 테이블을 생성
    - ORM(object relational mapping)으로 얻을 수 있는 장점
        - 1. 쿼리를 몰라도 파이썬으로도 가능
        - 2. 같은 목적으로 쿼리문을 작성해도 개발자마다 다른 쿼리문이 만들어져서 통일성이 깨짐
        - 3. 쿼리문을 잘못작성하면 시스템의 성능이 저하됨
        - 4. 데이터베이스를 변경하면 특정 데이터베이스에 의존하는 쿼리문을 모두 수정해야함
        - 위의 단점들을 모두 제거해줌

     - 모델의 목적에 맞게 모델안에 속성을 추가하기(대부분의 모델은 클래스로 생성)

7. SQLite
    - 소규모 프로젝트에서 사용되는 파일 기반의 가벼운 데이터베이스, 개발초기에 사용하다가 나중에 큰걸로 바꿈

8. models.py에 모델 추가
    - 그 후 setting.py의 INSTALLED_APP에 앱의 apps.py에 존재하는 config클래스를 추가하기
    - 'le_petit_atelier.apps.LePetitAtelierConfig'
    - 추가하지 안흥면 장고는 앱을 인식하지못하고 데이터베이스 관련된 작업을 할 수 없음
    - 장고는 모델을 이용하여 데이터베이스의 실체가 될 테이블을 만드는데 모델은 앱에 종속되어있으므로 장고에 앱을 등록해야됨
    - 아샬이 말한 장고는 데이터베이스 의존적이라는 뜻이 이의미인듯

9. 테이블 생성하기
    - python manage.py makemigrations 실행
    - 모델이 생성되거나 변경된 경우 migrate 명령을 실행할려면 테이블 작업 파일이 필요하고 이를 만드는게 위의명령어
    - makemigrations는 실질적으로 테이블을 만드는 명령어가아님, 작업파일을 만드는거임??
    - 명령어치면 앱에 migrations 폴더가 생김
    - makemigrations 를 다시실행하면 바뀐게없다고나옴(모델에 속성이 변경될 때 사용)
    - makemigrations 치고 migrate 사용
    - makemigrations, migrate 명령어는 모델의 속성이 추가되거나 변경되었을 때 쓰고 메서드가 추가됬을 떄는 사용안해도됨
    ### 마이그레이션 초기화 migrations 폴더 안에 마이그레이션 삭제 -> 데이터베이스 삭제 -> makemigrations -> migrate

10. 연결된 데이터로 조회하기
    - 1개의 Question모델에는 여러개의 Answer모델이 달릴 수 있음
    - Answer에는 question이라는 속성이 존재함
        -> a.question을 사용하면 연결된 질문을 조회가능
    - Question에는 answer 속성이 없음
        -> 대신 연결되어있다면 q.연결모델명_set.all()로 연결된 모든 데이터를 조회가능
    - filter(조건) : 반환값이 리스트형태인 QuerySet을 반환함(데이터가 없어도 빈 QuerySet 반환하고 오류발생하지않음)
    - get(조건) : 무조건 1개의 데이터를 반환함(데이터 없으면 오류발생)
    - filter(suject__contatin="테스트") : subject속성 중 테스트라는 텍스트를 가진 데이터 조회
    - q.연결모델명_set.all() : q에 연결된 모델들을 반환

11. admin 이용하기
    - python manage.py createsuperuser
    - 앱의 admin.py에 from .models import 원하는 모델
        - admin.site.register(등록할 모델들)
        - 이러면 장고 관리자페이지에 자동으로 등록됨
    - 검색 추가가능

12. Question 모델 데이터 작성일시 역순으로 조회하기
    - order_by에 -create_date 속성을 넣어 역순으로 조회한 데이터를 question_list에 저장
    - context에는 question_list를 저장
    - render로 context를 이용해서 html파일을 만듬(데이터를 넘겨준다라는 표현도 맞는듯, 템플릿이라함)

13. 템플릿
     - 프로젝트 바로 하위에 있는 템플릿 폴더를 공용템플릿 디렉터리라고 함
     - 그 템플릿 폴더 안에 앱폴더를 만들면 앱 템플릿 디렉터리라고함
     ○템플릿 태그
        - 템플릿 태그는 분기,반복,객체출력 3가지유형만 알면됨

        ○분기(조건)
            {% if 조건문1 %}
                <p> 조건문1에 해당하는 경우 </p>
            {% elif 조건문2 %}
                <p> 조건문2에 해당하는 경우 </p>
            {% else %}
                <p> 조건문 1,2에 해당되지 않는 경우 </p>
            {% endif %} 이거 꼭해야됨

        ○반복
            {% for item in list %}
                <p> 순서 : {{ forloop.counter }} </p>
                <p> {{ item }} </p>
            {% endfor %}

            - 반복 템플릿 안에서는 forloop 객체 사용가능(반복중 유용한 값을 제공하는 기능)
            - forloop.counter : for 문의 순서로 1부터 표시
            - forloop.counter0 : for 문의 순서로 0부터 표시
            - forloop.first : for문의 첫번째 순서인 경우 True
            - forloop.last : for문의 마지막 순서인 경우 True

        ○객체 출력 탬플릿 태그(객체에 속성이 있을 경우 파이썬이랑 똑같이 .으로 표현)
                - {{ question }}
                - {{ question.id }}
                - {{ question.subject }}

14. URL 매핑 추가 및 추가기능
    - question_list.html에서 질문을 클릭하면 뒤에 아이디를 붙여진 url로 이동함
        -> 설정을 안해놔서 urls.py에 등록해야됨
    - urls.py에 path에서 제공하는 name을 이용해서 url 규칙이 자주 바뀔때를 대비해서 대신 사용할 수 있음
        -> 기존 <a href="/le_petit_atelier/{{ question.id }}/">에서
        -> <a href={% url 'detail' question.id %}> 로 사용
    - name을 이용하게되면 앱을 여러개 사용 할때 중복 문제가 생길 수 있음
        -> 이땐 urls.py에 app_name = 이름 으로 처리한 후 html파일에서 앱이름:name으로 처리해야함

15. 답변 기능 추가
    - input태그를 누르면 form태그의 action 속성에 있는 주소가 호출됨
    - {% csrf_token %}는 실제 웹브라우저에서 작성된 데이터인지 확인해주는 보안코드임(서버에서 발행한 토큰과 다를 시 오류처리)
        -> 그래서 모든 form태그 바로 밑에는 저 코드를 써야됨

    ○실행 순서
        1. index에 질문들을 하이퍼링크로 걸어서 보여줌(누르면 아이디와함께 넘어감)
        2. 앱의 urls.py에서 숫자로 넘어온 것을 view.py의 detail 함수로 처리함
        3. 넘어온 question_id를 이용해서 데이터를 찾아서 question에 저장함
        4. 저장한 데이터를 context에 저장함
        5. render를 이용해서 context 내용을 html로 넘김
        6. 넘어온 데이터를 이용해서 html로 화면에 표시함

        1. 질문을 클릭했을 때 보여주는 디테일 화면에서 답변을 할 수 있음
        2. 답변을 하고 답변등록을 누르면 action에서 지정한 주소가 호출됨
        3. 앱의 urls.py에서 views.py의 answer_create 함수에서 처리함
        4. 넘어온 question_id를 이용해서 데이터를 찾아서 question에 저장함
        5. question에는 question_id에 해당하는 질문데이터를 저장함
        6. request로 넘어온 데이터 중 name이 content인 데이터를 content변수에 넣음)
        7. question에 저장한 데이터를 이용해 answer 데이터를 생성함
        8. redirect를 이용해서 이동할 페이지의 별칭과 URL에 전달해야할 값을 보내 원래페이지로 돌아감

        ★요약
            - 1. 입력된 URL을 urls.py에서 찾음
            - 2. views.py에서 함수를 호출함
            - 3. 함수는 render를 통해 html에 데이터를 보내 화면을 보여줌

16. 웹페이지에 CSS 적용하기
    - setting.py에 STATICFILES_DIRS = [BASE_DIR / 'static',] 추가
    - static 폴더 만들고 그안에 스타일시트를 만듬
    - html에 적용 할 때엔 맨위에 {% load static %}
    <link rel="stylesheet" href="{% static 'style.css' %}" type="text/css">
    추가

17. 표준 HTML
    - 어떠한 운영체제나 웹브라우저에서 웹페이지가 정상적으로 작동하고 동일하게 보일려면 웹표준을 지키는 HTML문서로 작성해야됨
    - 템플릿파일들을 모두 표준 HTML로 변경하면 body바깥의 부분은 모두 같은 내용으로 중복됨
        -> 그리고 CSS파일이름이 변경되거나 새로운 CSS파일이 추가되면 일일이 다 찾아서 수정해줘야됨
        -> 이러한 것을 막기위해 장고는 템플릿 상속을 지원함
        -> {% extent "상속할 html" %} 후 base.html의 바디에 들어가있는 block을 추가해주면됨

18. 질문 등록하기
    ○실행순서
        1. question_list.html에서 질문등록하기 버튼을 누르면 le_petit_atelier:question_create 실행
        2. urls.py에서 le_petit_atelier:question_create를 찾아 해당하는 함수 실행
        3. views.question_create를 GET방식으로 요청
        4. views.py의 question_create 실행하고 GET방식이니까 form에 아무것도 저장하지 않고 form객체를 생성
        5. 생성한 객체를 render를 이용하여 question_from.html로 보냄
        6. form안에는 기본적으로 forms.py의 QuestionForm에서 생성한 기본폼인 Question 모델과 subject, content 필드를가짐
        7. 질문등록화면에서 입력값을 채우고 저장하기 버튼을 누르면 question/create/가 POST 방식으로 요청됨(현재페이지니까)
        8. 다시 views.question_create 함수가 실행되고
        9. 이번엔 form에 POST된 데이터를 넣어서 폼객체를 생성함
        10. form.is_valid()는 POST요청으로 받은 form이 유효한지 검사함(유효하지않으면 폼에 오류저장)
        11. question = form.save는 Question모델에 저장하는거고 commit=False는 임시저장을 의미함
        12. 즉, 실제 데이터는 아직 저장되지 않은 상태를 말한다.
        이렇게 임시 저장을 사용하는 이유는 폼으로 질문 데이터를 저장할 경우
        Question 모델의 create_date에 값이 설정되지 않아 오류가 발생하기 때문이다(폼에는 현재 subject, content 필드만 있고 create_date 필드는 없다).
        이러한 이유로 임시 저장을 한 후 question 객체를 반환받아 create_date에 값을 설정한 후 question.save()로 실제 저장하는 것이다.
            -> form.save(commit=False)대신 form.save()를 수행하면 create_date속성이 없다는 오류 메시지가 나타남
        13.
        ★ Form 공부하기

