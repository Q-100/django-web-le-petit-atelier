1. setting 파일에서 언어랑 시간 바꾸기
2. django-admin startapp 이름
    - 앱 시작하기(__init__, admin, apps 등)
3. 메인의 urls에서 urlpattern 추가하기(URL 매핑추가)
    - path('le_petit_atelier/', include('le_petit_atelier.urls')) 추가하기
    - include는 le_petit_atelier/로 시작되는 페이지 요청은 모두 le_petit_atelier.urls에서 처리하라고 알림

    # 여기서 path가 ''인 이유는 메인의 urls에서 이미
    # path('le_petit_atelier/', include('le_petit_atelier.urls')),로 처리했기때문에
    # 여기의 urls에 path('le_petit_atelier/'로하면 결국
    # le_petit_atelier/le_petit_atelier/ 가 되기 때문에 앞에서 처리한걸 뒤에서 또할필요없음


4. 앱의 views.py에 index 함수 추가하기
    - index 함수의 매개변수인 request는 장고에 의해 자동으로 전달되는 HTTP 요청 객체
    - request는 사용자가 전달한 데이터를 확인 할 때 사용

5. Url 분리하기
    - 앱의 urls.py에 매핑하기 위해서는 앱폴더에 urls.py 생성 후 위의 3번 참고하기기
    - urlpatterns = [
    path('', views.index),
    ]

6. 모델(데이터 관리)
    - 장고는 모델로 데이터를 관리함
    - 데이터베이스를 여러개 사용 할 때 setting.py의 데이터베이스에서 default에 지정한 데이터 베이스 외에 추가로 등록 가능
    - python manage.py migrate로 앱들이 필요로 하는 테이블을 생성
    - ORM(object relational mapping)으로 얻을 수 있는 장점
        - 1. 쿼리를 몰라도 파이썬으로도 가능
        - 2. 같은 목적으로 쿼리문을 작성해도 개발자마다 다른 쿼리문이 만들어져서 통일성이 깨짐
        - 3. 쿼리문을 잘못작성하면 시스템의 성능이 저하됨
        - 4. 데이터베이스를 변경하면 특정 데이터베이스에 의존하는 쿼리문을 모두 수정해야함
        - 위의 단점들을 모두 제거해줌

     - 모델의 목적에 맞게 모델안에 속성을 추가하기(대부분의 모델은 클래스로 생성)

7. SQLite
    - 소규모 프로젝트에서 사용되는 파일 기반의 가벼운 데이터베이스, 개발초기에 사용하다가 나중에 큰걸로 바꿈

8. models.py에 모델 추가
    - 그 후 setting.py의 INSTALLED_APP에 앱의 apps.py에 존재하는 config클래스를 추가하기
    - 'le_petit_atelier.apps.LePetitAtelierConfig'
    - 추가하지 안흥면 장고는 앱을 인식하지못하고 데이터베이스 관련된 작업을 할 수 없음
    - 장고는 모델을 이용하여 데이터베이스의 실체가 될 테이블을 만드는데 모델은 앱에 종속되어있으므로 장고에 앱을 등록해야됨
    - 아샬이 말한 장고는 데이터베이스 의존적이라는 뜻이 이의미인듯

9. 테이블 생성하기
    - python manage.py makemigrations 실행
    - 모델이 생성되거나 변경된 경우 migrate 명령을 실행할려면 테이블 작업 파일이 필요하고 이를 만드는게 위의명령어
    - makemigrations는 실질적으로 테이블을 만드는 명령어가아님, 작업파일을 만드는거임??
    - 명령어치면 앱에 migrations 폴더가 생김
    - makemigrations 를 다시실행하면 바뀐게없다고나옴(모델바뀔때마다 쓰는듯?)
    - makemigrations 치고 migrate 사용
    ### 마이그레이션 초기화 migrations 폴더 안에 마이그레이션 삭제 -> 데이터베이스 삭제 -> makemigrations -> migrate

10. 연결된 데이터로 조회하기
    - 1개의 Question모델에는 여러개의 Answer모델이 달릴 수 있음
    - Answer에는 question이라는 속성이 존재함
        -> a.question을 사용하면 연결된 질문을 조회가능
    - Question에는 answer 속성이 없음
        -> 대신 연결되어있다면 q.연결모델명_set.all()로 연결된 모든 데이터를 조회가능

11. admin 이용하기
    - python manage.py createsuperuser
    - 앱의 admin.py에 from .models import 원하는 모델
        - admin.site.register(등록할 모델들)
        - 이러면 장고 관리자페이지에 자동으로 등록됨
    - 검색 추가가능